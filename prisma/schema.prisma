// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  username      String    @unique @default(cuid())
  name          String?
  bio           String?
  image         String?
  likes         Likes[]
  registeredAt  DateTime  @default(now())
  Account       Account[]
  Session       Session[]
  Tweets        Tweets[]
}

model Tweets {
  id            String   @id @default(cuid())
  content       String
  createdAt     DateTime @default(now())
  Likes         Likes[]
  User          User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId     String
  parentTweet   Tweets?  @relation("tweets below", fields: [parentTweetId], references: [id], onDelete: Cascade)
  parentTweetId String?
  Replies       Tweets[] @relation("tweets below")
}

model Likes {
  id      String @id @default(cuid())
  liker   User   @relation(fields: [likerId], references: [id], onDelete: Cascade)
  likerId String
  tweet   Tweets @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId String

  @@unique([likerId, tweetId])
}
